<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AkiEvergarden</title>
  
  <subtitle>常绿之森</subtitle>
  <link href="https://blog.akievergarden.top/atom.xml" rel="self"/>
  
  <link href="https://blog.akievergarden.top/"/>
  <updated>2023-10-23T11:42:39.838Z</updated>
  <id>https://blog.akievergarden.top/</id>
  
  <author>
    <name>AkiEvergarden</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下的Redis编译安装</title>
    <link href="https://blog.akievergarden.top/2023/10/15/Linux%E4%B8%8B%E7%9A%84Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.akievergarden.top/2023/10/15/Linux%E4%B8%8B%E7%9A%84Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</id>
    <published>2023-10-15T09:12:13.000Z</published>
    <updated>2023-10-23T11:42:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说到NoSQL果然就要提到Redis了，本文中介绍了如何在Linux上安装Redis的过程。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>在 <a href="https://redis.io/download/">https://redis.io/download/</a> 中找到download x.x.x 的链接，右键复制下载地址,例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/redis/redis/archive/7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>在Linux的命令行使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/redis/redis/archive/7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>注意在那之前进行权限提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>然后redis的tar.gz 压缩包就在 &#x2F;root 的目录下，进行解压操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf 7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>其中 -zxf 分别是：</p><ol><li>-z：使用 gzip 压缩&#x2F;解压缩。这个选项告诉 tar 命令使用 gzip 压缩算法来处理文件。</li><li>-x：提取文件。这个选项告诉 tar 命令要从归档文件中提取文件。</li><li>-f：指定归档文件。这个选项后面需要接归档文件的路径或名称。</li></ol><p>解压之后能获得一个 &#x2F;redis.x.x.x 的文件夹</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>将解压后的文件夹移动到&#x2F;usr&#x2F;local下，并命名为新的文件夹redis(当然你不在这么做也行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> redis-7.2.1 /usr/local/redis</span><br></pre></td></tr></table></figure><p>执行以下程序进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><p>其中PREFIX 为指定编译安装后的目录，如果不指定 Linux会将可执行文件存放在&#x2F;usr&#x2F;local&#x2F;bin目录，库文件会存放在&#x2F;usr&#x2F;local&#x2F;lib目录</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>完成安装之后 在&#x2F;usr&#x2F;local&#x2F;redis目录下会多出 bin可执行文件目录</p><p>在运行之前 先了解 redis.conf ，如同字面意思，它是配置文件。根据文件中前几行的描述，可以这样使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line">./bin/redis-server ./redis.conf <span class="comment">#在/usr/local/redis 目录下</span></span><br></pre></td></tr></table></figure><p>文件中有大部分注释的英文解释，以下只讲几个配置时用得上的</p><p>1.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span><br><span class="line"><span class="comment"># for connections from all available network interfaces on the host machine.</span></span><br><span class="line"><span class="comment"># It is possible to listen to just one or multiple selected interfaces using</span></span><br><span class="line"><span class="comment"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span><br><span class="line"><span class="comment"># Each address can be prefixed by &quot;-&quot;, which means that redis will not fail to</span></span><br><span class="line"><span class="comment"># start if the address is not available. Being not available only refers to</span></span><br><span class="line"><span class="comment"># addresses that does not correspond to any network interface. Addresses that</span></span><br><span class="line"><span class="comment"># are already in use will always fail, and unsupported protocols will always BE</span></span><br><span class="line"><span class="comment"># silently skipped.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span></span><br><span class="line"><span class="comment"># bind * -::*                     # like the default, all available interfaces</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span><br><span class="line"><span class="comment"># internet, binding to all the interfaces is dangerous and will expose the</span></span><br><span class="line"><span class="comment"># instance to everybody on the internet. So by default we uncomment the</span></span><br><span class="line"><span class="comment"># following bind directive, that will force Redis to listen only on the</span></span><br><span class="line"><span class="comment"># IPv4 and IPv6 (if available) loopback interface addresses (this means Redis</span></span><br><span class="line"><span class="comment"># will only be able to accept client connections from the same host that it is</span></span><br><span class="line"><span class="comment"># running on).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span><br><span class="line"><span class="comment"># COMMENT OUT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You will also need to set a password unless you explicitly disable protected</span></span><br><span class="line"><span class="comment"># mode.</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 -::1</span><br></pre></td></tr></table></figure></p><pre><code>默认下 Redis只允许本机链接；如果需要局域网或者外网的另一台主机链接的话需要bind链接主机的ip地址，如果希望任何的主机都能链接的话，修改或加入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> * -::*</span><br></pre></td></tr></table></figure></code></pre><p>2.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># By default protected mode is enabled. You should disable it only if</span></span><br><span class="line"><span class="comment"># you are sure you want clients from other hosts to connect to Redis</span></span><br><span class="line"><span class="comment"># even if no authentication is configured.</span></span><br><span class="line">protected-mode <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><br>    还需要关闭protected-mode，才能从另一台主机链接<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></p><p>3.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379 (IANA #815344).</span></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure><br>    更改port 后的内容以更改端口</p><p>4.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span></span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure><br>    以守护线程运行Redis，当Redis以守护进程方式运行时，它会在&#x2F;var&#x2F;run&#x2F;redis.pid写入一个pid文件<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure><br>5.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IMPORTANT <span class="doctag">NOTE:</span> starting with Redis 6 &quot;requirepass&quot; is just a compatibility</span></span><br><span class="line"><span class="comment"># layer on top of the new ACL system. The option effect will be just setting</span></span><br><span class="line"><span class="comment"># the password for the default user. Clients will still authenticate using</span></span><br><span class="line"><span class="comment"># AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span></span><br><span class="line"><span class="comment"># if they follow the new protocol: both will work.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The requirepass is not compatible with aclfile option and the ACL LOAD</span></span><br><span class="line"><span class="comment"># command, these will cause requirepass to be ignored.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br></pre></td></tr></table></figure><br>    通过 requirepass xxxxxx 可以设置默认用户认证密码，至少6位字符，例如<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 1145141919810</span><br></pre></td></tr></table></figure></p><p>最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-server ./redis.conf </span><br></pre></td></tr></table></figure><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>如果你需要完成Redis的开机启动的话，参考以下优秀文章：<br><a href="https://blog.csdn.net/m0_60721514/article/details/123777643">https://blog.csdn.net/m0_60721514/article/details/123777643</a> </p>]]></content>
    
    
    <summary type="html">说到NoSQL果然就要提到Redis了，本文中介绍了如何在Linux上安装Redis的过程。</summary>
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://blog.akievergarden.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>JNI本地方法调用初探</title>
    <link href="https://blog.akievergarden.top/2023/10/06/JNI%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
    <id>https://blog.akievergarden.top/2023/10/06/JNI%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2023-10-06T02:24:12.160Z</published>
    <updated>2023-10-23T11:42:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 java 中可以在方法中指定关键字 native 使得java可以调用本地代码中得方法，如c\cpp。</p><p>本文描述了如何简单的跑通了在java中调用本地的一个cpp方法的过程。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>IntelliJ IDEA 2022.3.2 编写java代码</li><li>CLion 2023.2.2 编写cpp代码</li></ol><h2 id="java-代码"><a href="#java-代码" class="headerlink" title="java 代码"></a>java 代码</h2><h3 id="创建一个-main-文件"><a href="#创建一个-main-文件" class="headerlink" title="创建一个 main 文件"></a>创建一个 main 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">114</span>,<span class="number">514</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span>  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中使用native 关键字，表示该方法为本地方法</p><h3 id="构建该文件-以下是文件树结构"><a href="#构建该文件-以下是文件树结构" class="headerlink" title="构建该文件, 以下是文件树结构"></a>构建该文件, 以下是文件树结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─out</span><br><span class="line">│  └─production</span><br><span class="line">│      └─javaNative</span><br><span class="line">│              Main.class</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">     Main.java</span><br></pre></td></tr></table></figure><h3 id="生成该本地方法的头文件"><a href="#生成该本地方法的头文件" class="headerlink" title="生成该本地方法的头文件"></a>生成该本地方法的头文件</h3><p>在项目的根目录的powershell或者cmd中使用以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -classpath out/production/javaNative -d ./jni Main</span><br></pre></td></tr></table></figure><p>指令解释：</p><ol><li>javah: 表示要运行javah命令。javah命令用于生成Java类的本地方法接口（Native Method Interface，简称JNI）头文件。它可以根据Java类中声明的本地方法生成对应的C&#x2F;C++头文件，以便在本地代码中实现这些方法。</li><li>-classpath out&#x2F;production&#x2F;javaNative: 指定编译后的Java类文件所在的类路径。这里编译后的类文件位于out&#x2F;production&#x2F;javaNative目录中。</li><li>-d .&#x2F;jni: 指定生成的JNI头文件的输出目录。这里将生成的头文件放在当前目录下的jni目录中。</li><li>Main: 指定要生成JNI头文件的Java类名。这里生成的JNI头文件将与名为Main的Java类相关联。</li></ol><h3 id="之后就能在-x2F-jni-文件夹下看到-Main-h-的头文件"><a href="#之后就能在-x2F-jni-文件夹下看到-Main-h-的头文件" class="headerlink" title="之后就能在 &#x2F;jni 文件夹下看到 Main.h 的头文件"></a>之后就能在 &#x2F;jni 文件夹下看到 Main.h 的头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class Main */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Class:     Main</span></span><br><span class="line"><span class="comment">* Method:    sum</span></span><br><span class="line"><span class="comment">* Signature: (II)I &lt;--(II)表明传入两个Int类型参数，I表明返回一个Int类型结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_Main_sum <span class="comment">//&lt;-- 为要求实现的方法</span></span><br><span class="line">(JNIEnv *, jclass, jint, jint);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="cpp-代码"><a href="#cpp-代码" class="headerlink" title="cpp 代码"></a>cpp 代码</h2><h3 id="使用Clion"><a href="#使用Clion" class="headerlink" title="使用Clion"></a>使用Clion</h3><ol><li><p>创建一个项目</p></li><li><p>在项目中的 CMakeList.txt中引入方才java编译使用的jdk的include目录和include&#x2F;win32文件，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include_directories(&quot;C:/Program Files/Eclipse Adoptium/jdk-8.0.382.5-hotspot/include&quot;)</span><br><span class="line"></span><br><span class="line">include_directories(&quot;C:/Program Files/Eclipse Adoptium/jdk-8.0.382.5-hotspot/include/win32&quot;)</span><br></pre></td></tr></table></figure></li><li><p>将 &#x2F;jni 文件夹下看到 Main.h 的头文件 加入项目的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  CMakeLists.txt</span><br><span class="line"> │  main.cpp</span><br><span class="line"> │  Main.h &lt;---- 方在与main.cpp 同级别</span><br><span class="line"> │</span><br><span class="line"> ├─.idea</span><br><span class="line"> │      ...</span><br><span class="line"> │</span><br><span class="line"> └─cmake-build-debug</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></li></ol><h3 id="编写cpp实现头文件中要求实现的方法"><a href="#编写cpp实现头文件中要求实现的方法" class="headerlink" title="编写cpp实现头文件中要求实现的方法"></a>编写cpp实现头文件中要求实现的方法</h3><ol><li><p>在 main.cpp 文件中写入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Main.h&quot;</span></span></span><br><span class="line"> <span class="function">JNIEXPORT jint JNICALL <span class="title">Java_Main_sum</span></span></span><br><span class="line"><span class="function">         <span class="params">(JNIEnv *, jclass, jint a, jint b)</span></span>&#123; <span class="comment">//仅仅使用了后边的jint</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>JNIEXPORT jint JNICALL: 这是一个用于指定函数导出的宏定义。它告诉编译器将这个函数作为动态链接库的导出函数。JNIEXPORT是一个宏，用于指定函数的导出类型。jint表示函数的返回类型是int。</li><li>Java_Main_sum: 这是一个约定的命名规则，用于表示这个JNI函数与Java类Main中的sum方法相对应。在JNI中，函数名的命名规则是Java_&lt;类名&gt;_&lt;方法名&gt;。</li><li>(JNIEnv *, jclass, jint, jint): 这是函数的参数列表。在JNI中，函数的前两个参数分别是JNIEnv和jclass类型的指针，用于与Java虚拟机进行交互。后面的两个参数是jint类型的整数参数。</li></ol></li><li><p>jni中的类型与Java的基本类型相似，仅仅需要在java的基本类型前加入j；例如Java中Boolean，在jni中则为jboolean；Byte&lt;–&gt;jbyte 。。。</p></li></ol><h3 id="编译生成动态库"><a href="#编译生成动态库" class="headerlink" title="编译生成动态库"></a>编译生成动态库</h3><p>在项目的根目录的powershell或者cmd中使用以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.cpp -I &quot;C:/Program Files/Eclipse Adoptium/jdk-<span class="number">8</span>.<span class="number">0</span>.<span class="number">382</span>.<span class="number">5</span>-hotspot/include&quot; -I &quot;C:/Program Files/Eclipse Adoptium/jdk-<span class="number">8</span>.<span class="number">0</span>.<span class="number">382</span>.<span class="number">5</span>-hotspot/include/win32&quot; -shared -o main.dll -lstdc++</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>gcc main.cpp 使用gcc编译main.cpp文件</li><li>-I “…” 引入文件</li><li>-shared 指定生成动态链接库</li><li>-o main.dll 指定生成文件名字</li><li>-lstdc++ 链接windows上的cpp标准库</li></ol><p>最后就可以在项目的更目录到 main.dll 文件了</p><h2 id="在Java中使用该dll文件"><a href="#在Java中使用该dll文件" class="headerlink" title="在Java中使用该dll文件"></a>在Java中使用该dll文件</h2><ol><li>将生成的main.dll文件放在方才的java项目的更目录</li><li>在java Main.java 中加载该.dll文件，使用以下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 System.getProperty(&quot;user.dir&quot;) 获取项目的路径</span></span><br><span class="line">        System.load(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/mian.dll&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">114</span>,<span class="number">514</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span>  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译运行得到结果：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">628</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>尚不清楚 JNIEnv *, jclass 的作用，留有之后探究。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 java 中可以在方法中指定关键字 native 使得java可以调用本地代码中得方法，如c\cpp。&lt;/p&gt;
&lt;p&gt;本文描述了如何简单</summary>
      
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JVM" scheme="https://blog.akievergarden.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>openjdk-8的编译</title>
    <link href="https://blog.akievergarden.top/2023/09/28/openjdk-8%E7%9A%84%E7%BC%96%E8%AF%91/"/>
    <id>https://blog.akievergarden.top/2023/09/28/openjdk-8%E7%9A%84%E7%BC%96%E8%AF%91/</id>
    <published>2023-09-28T09:19:42.567Z</published>
    <updated>2023-10-23T11:42:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手动编译一个jdk8"><a href="#手动编译一个jdk8" class="headerlink" title="手动编译一个jdk8"></a>手动编译一个jdk8</h1><p>学习JVM自然是要先自己构建一个jdk,做到管中窥豹，从而不会无从下手。</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>本次构建jdk-8使用的是 ubuntu-22.04.3-live-server-amd64，内核版本为：GNU&#x2F;Linux 5.15.0-84-generic x86_64</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>基于VMware 的虚拟机，分配host AMD Ryzen 7 3800X 8-Core Processor 8核心 8GB内存</p><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p>Jetbrians Clion 使用Remote Development链接Ubuntu虚拟机</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>根据 <a href="https://hg.openjdk.org/jdk8/jdk8/raw-file/tip/README-builds.html">https://hg.openjdk.org/jdk8/jdk8/raw-file/tip/README-builds.html</a> 得知道：编译环境推荐为：</p><ol><li>gcc: 4.8</li><li>g++: 4.8</li><li>make: 3.81</li><li>bootstrap JDK: OpenJDK8</li></ol><h2 id="OpenJDK8源码"><a href="#OpenJDK8源码" class="headerlink" title="OpenJDK8源码"></a>OpenJDK8源码</h2><p><a href="https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120">https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120</a></p><h2 id="基本依赖"><a href="#基本依赖" class="headerlink" title="基本依赖"></a>基本依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="由于在ubuntu22-04-3-中没有gcc-4-8-的源，-需要导入旧版的源"><a href="#由于在ubuntu22-04-3-中没有gcc-4-8-的源，-需要导入旧版的源" class="headerlink" title="由于在ubuntu22.04.3 中没有gcc 4.8 的源， 需要导入旧版的源"></a>由于在ubuntu22.04.3 中没有gcc 4.8 的源， 需要导入旧版的源</h2>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>   在最下方添加旧版源地址并保存</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://archive.ubuntu.com/ubuntu xenial main</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu xenial universe</span><br></pre></td></tr></table></figure><p>   更新apt源信息，并安装gcc和g++</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc-4.8 g++-4.8</span><br></pre></td></tr></table></figure><p>   在更新过程中 我遇到了</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Err:5 http://archive.ubuntu.com/ubuntu xenial InRelease</span><br><span class="line">The following signatures couldn<span class="string">&#x27;t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span></span><br><span class="line"><span class="string">Reading package lists... Done</span></span><br><span class="line"><span class="string">W: GPG error: http://archive.ubuntu.com/ubuntu xenial InRelease: The following signatures couldn&#x27;</span>t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span><br><span class="line">E: The repository <span class="string">&#x27;http://archive.ubuntu.com/ubuntu xenial InRelease&#x27;</span> is not signed.</span><br><span class="line">N: Updating from such a repository can<span class="string">&#x27;t be done securely, and is therefore disabled by default.</span></span><br><span class="line"><span class="string">N: See apt-secure(8) manpage for repository creation and user configuration details.</span></span><br></pre></td></tr></table></figure><p>   这是因为系统无法识别某些GPG公钥（PUBKEY）导致的。需要做的是在系统中获取这些缺失的公钥。可以使用以下命令来获取这些公钥：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>   设置安装的gcc g++4.8 为首选</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100</span><br></pre></td></tr></table></figure><p>   查看版本：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@aki:~<span class="comment"># g++ --version</span></span><br><span class="line">g++ (Ubuntu 4.8.5-4ubuntu2) 4.8.5</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">root@aki:~<span class="comment"># gcc --version</span></span><br><span class="line">gcc (Ubuntu 4.8.5-4ubuntu2) 4.8.5</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><h2 id="安装make-3-81版本"><a href="#安装make-3-81版本" class="headerlink" title="安装make 3.81版本"></a>安装make 3.81版本</h2><p>   从官方下载：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.gnu.org/gnu/make/make-3.81.tar.gz</span><br></pre></td></tr></table></figure><p>   下载完成之后：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf make-3.81.tar.gz </span><br><span class="line"><span class="built_in">cd</span> make-3.81/</span><br></pre></td></tr></table></figure><p>   接着修改代码，打开glob&#x2F;glob.c文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">#ifdef  HAVE_CONFIG_H</span></span><br><span class="line"><span class="comment"># include &lt;config.h&gt;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define __alloca alloca   &lt;- 添加这一句</span></span><br><span class="line"><span class="comment">#define __stat stat   &lt;- 添加这一句</span></span><br><span class="line">/* Enable GNU extensions </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>   防止之后出现报错：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: /root/make-3.81/glob/glob.c:955: undefined reference to `__stat<span class="string">&#x27;</span></span><br><span class="line"><span class="string">/usr/bin/ld: /root/make-3.81/glob/glob.c:809: undefined reference to `__stat&#x27;</span></span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">make[1]: *** [Makefile:411: make] Error 1</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/root/make-3.81&#x27;</span></span><br><span class="line">make: *** [Makefile:603: install-recursive] Error 1</span><br></pre></td></tr></table></figure><p>   然后进行安装 make-3.81</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash configure</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>   删除最新的make</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove make -y <span class="comment">#删除之前apt装的make，其位置在/usr/bin/make</span></span><br></pre></td></tr></table></figure><p>   删除链接</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /usr/bin/make</span><br></pre></td></tr></table></figure><p>   测试：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">make -version</span><br><span class="line">GNU Make 3.81</span><br><span class="line">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">This program built <span class="keyword">for</span> x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="安装bootstrap-JDK-OpenJDK8"><a href="#安装bootstrap-JDK-OpenJDK8" class="headerlink" title="安装bootstrap JDK: OpenJDK8"></a>安装bootstrap JDK: OpenJDK8</h2><p>   由于JDK中某些代码是Java编写的，所以我们还需要安装一个启动JDK，启动JDK可以是当前版本或低一版本，比如我们要编译JDK8的源码，那么就可以使用JDK7、JDK8作为启动JDK，对源码中的一些java文件进行编译。这里我们选择安装 openjdk8作为启动JDK：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h2 id="编译openjdk8"><a href="#编译openjdk8" class="headerlink" title="编译openjdk8"></a>编译openjdk8</h2><p>   解压</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip jdk8-b120</span><br></pre></td></tr></table></figure><p>   进入目录</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jdk-jdk8-b120/</span><br></pre></td></tr></table></figure><p>   修改文件以支持当前linux内核：<br>   首先是hotspot&#x2F;make&#x2F;linux&#x2F;Makefile文件</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原有的 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3%</span><br><span class="line">修改为 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3% 4% 5%</span><br></pre></td></tr></table></figure><p>   接着是hotspot&#x2F;make&#x2F;linux&#x2F;makefiles&#x2F;gcc.make文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原有的 WARNINGS_ARE_ERRORS = -Werror</span><br><span class="line">修改为 <span class="comment">#WARNINGS_ARE_ERRORS = -Werror</span></span><br></pre></td></tr></table></figure><p>   接着是nashorn&#x2F;make&#x2F;BuildNashorn.gmk文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(CP) -R -p $(NASHORN_OUTPUTDIR)/nashorn_classes/* $(@D)/</span><br><span class="line">$(FIXPATH) $(JAVA) \</span><br><span class="line">原有的 -<span class="built_in">cp</span> <span class="string">&quot;<span class="subst">$(NASHORN_OUTPUTDIR)</span>/nasgen_classes<span class="subst">$(PATH_SEP)</span><span class="subst">$(NASHORN_OUTPUTDIR)</span>/nashorn_classes&quot;</span> \</span><br><span class="line">修改为  -Xbootclasspath/p:<span class="string">&quot;<span class="subst">$(NASHORN_OUTPUTDIR)</span>/nasgen_classes<span class="subst">$(PATH_SEP)</span><span class="subst">$(NASHORN_OUTPUTDIR)</span>/nashorn_classes&quot;</span> \</span><br><span class="line"></span><br><span class="line">jdk.nashorn.internal.tools.nasgen.Main $(@D) jdk.nashorn.internal.objects $(@D)</span><br></pre></td></tr></table></figure><p>   执行编译前的configure</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash configure --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FIELS=0</span><br></pre></td></tr></table></figure><p>   含义解读：</p><ol><li>–with-debug-level&#x3D;slowdebug  生成一个带有调试信息的OpenJDK8版本，slowdebug表示调试级别是最低的，也就是说生成的二进制文件会比较小，但是调试信息会比较少</li><li>–enable-debug-symbols 在生成的二进制文件中包含调试符号，这样可以在使用调试工具时，看到源代码中的变量名和函数名等</li><li>ZIP_DEBUGINFO_FIELS&#x3D;0 不要将调试信息打包成zip文件，而是直接放在二进制文件中</li></ol><p>   编译</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>   遇到问题</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/home/jdk8/jdk/src/solaris/native/java/net/PlainDatagramSocketImpl.c:38:24: fatal error: sys/sysctl.h: 没有那个文件或目录</span><br><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br><span class="line">                        ^</span><br><span class="line">compilation terminated.</span><br><span class="line">/home/jdk8/jdk/src/solaris/native/java/net/PlainSocketImpl.c:46:24: fatal error: sys/sysctl.h: 没有那个文件或目录</span><br><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br><span class="line">                        ^</span><br><span class="line">compilation terminated.</span><br><span class="line">In file included from /home/jdk8/jdk/src/share/native/java/net/net_util.c:29:0:</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.c: In <span class="keyword">function</span> ‘NET_SockaddrToInetAddress’:</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.h:46:41: warning: comparison between pointer and <span class="built_in">integer</span> [enabled by default]</span><br><span class="line"><span class="comment">#define CHECK_NULL_RETURN(x, y) if ((x) == NULL) return y;</span></span><br><span class="line">                                        ^</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.c:268:13: note: <span class="keyword">in</span> expansion of macro ‘CHECK_NULL_RETURN’</span><br><span class="line">            CHECK_NULL_RETURN(ret, NULL);</span><br><span class="line">            ^</span><br><span class="line">gmake[2]: *** [lib/NetworkingLibraries.gmk:57：/home/jdk8/build/linux-x86_64-normal-server-release/jdk/objs/libnet/PlainDatagramSocketImpl.o] 错误 1</span><br><span class="line">gmake[2]: *** 正在等待未完成的任务....</span><br><span class="line">gmake[2]: *** [lib/NetworkingLibraries.gmk:57：/home/jdk8/build/linux-x86_64-normal-server-release/jdk/objs/libnet/PlainSocketImpl.o] 错误 1</span><br><span class="line">gmake[1]: *** [BuildJdk.gmk:70：libs-only] 错误 2</span><br><span class="line">make: *** [/home/jdk8//make/Main.gmk:116：jdk-only] 错误 2</span><br></pre></td></tr></table></figure><p>   这个报错的主要原因是随着 glibc 2.32 的发布，Linux 系统删除了sys&#x2F;sysctl.h。</p><p>   因此解决方式只需要把openjdk8目录下的:</p><p>   jdk&#x2F;src&#x2F;solaris&#x2F;native&#x2F;java&#x2F;net&#x2F;PlainDatagramSocketImpl.c 中的38行<br>   jdk&#x2F;src&#x2F;solaris&#x2F;native&#x2F;java&#x2F;net&#x2F;PlainSocketImpl.c中的46行注释掉就行</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt; 改成</span></span><br><span class="line">// <span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br></pre></td></tr></table></figure><p>   参考来自：<a href="https://blog.csdn.net/weixin_50955418/article/details/126716611">https://blog.csdn.net/weixin_50955418/article/details/126716611</a></p><p>   最后成功会显示</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">----- Build <span class="built_in">times</span> -------</span><br><span class="line">Start 2023-09-28 17:07:31</span><br><span class="line">End   2023-09-28 17:09:01</span><br><span class="line">00:00:00 corba</span><br><span class="line">00:00:06 demos</span><br><span class="line">00:00:56 docs</span><br><span class="line">00:00:00 hotspot</span><br><span class="line">00:00:08 images</span><br><span class="line">00:00:00 jaxp</span><br><span class="line">00:00:00 jaxws</span><br><span class="line">00:00:14 jdk</span><br><span class="line">00:00:00 langtools</span><br><span class="line">00:00:05 nashorn</span><br><span class="line">00:01:30 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK <span class="keyword">for</span> target <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>   在jdk-jdk8-b120&#x2F; 目录中输入：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/linux-x86_64-normal-server-slowdebug/jdk/bin/java -version</span><br></pre></td></tr></table></figure><p>   得到结果</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version <span class="string">&quot;1.8.0-internal-debug&quot;</span></span><br><span class="line"> OpenJDK Runtime Environment (build 1.8.0-internal-debug-root_2023_09_28_16_55-b00)</span><br><span class="line"> OpenJDK 64-Bit Server VM (build 25.0-b62-debug, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习JVM前的openjdk8编译</summary>
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JVM" scheme="https://blog.akievergarden.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>b2云存储与cloudflareSaaS的ip精选</title>
    <link href="https://blog.akievergarden.top/2023/05/27/b2%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%8EcloudflareSaaS%E7%9A%84ip%E7%B2%BE%E9%80%89/"/>
    <id>https://blog.akievergarden.top/2023/05/27/b2%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%8EcloudflareSaaS%E7%9A%84ip%E7%B2%BE%E9%80%89/</id>
    <published>2023-05-27T19:42:59.000Z</published>
    <updated>2023-10-23T11:42:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说实话：-不是很稳定，这就不推荐了"><a href="#说实话：-不是很稳定，这就不推荐了" class="headerlink" title="说实话： 不是很稳定，这就不推荐了"></a>说实话： 不是很稳定，这就不推荐了</h1><p>即使进行了ip精选，稳定性能也很低，时不时加载不出图，即使能加载图片，速率也很慢（，不建议费时间</p>]]></content>
    
    
    <summary type="html">说实话： 不是很稳定，这就不推荐了 即使进行了ip精选，稳定性能也很低，时不时加载不出图，即使能加载图片，速率也很慢（，不建议费时间 </summary>
    
    
    
    <category term="日常" scheme="https://blog.akievergarden.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="白嫖" scheme="https://blog.akievergarden.top/tags/%E7%99%BD%E5%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>javaweb实验</title>
    <link href="https://blog.akievergarden.top/2023/04/06/javaweb%E5%AE%9E%E9%AA%8C/"/>
    <id>https://blog.akievergarden.top/2023/04/06/javaweb%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-04-06T08:39:52.000Z</published>
    <updated>2023-10-23T11:42:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><p>使用相对路径进行图片展示<p><p><img src="/pic/illust_93484813_20220917_200428.jpg" alt="相对路径"></p><h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p>使用绝对路径进行图片展示<p><p><img src="https://img.mknacg.top:458/images/2020/04/01/BoxFront1.jpg" alt="绝对路径"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;相对路径&quot;&gt;&lt;a href=&quot;#相对路径&quot; class=&quot;headerlink&quot; title=&quot;相对路径&quot;&gt;&lt;/a&gt;相对路径&lt;/h1&gt;&lt;p&gt;使用相对路径进行图片展示&lt;p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/illust_93484813_20220917_20</summary>
      
    
    
    
    
    <category term="实验" scheme="https://blog.akievergarden.top/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
</feed>
