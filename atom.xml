<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AkiEvergarden</title>
  
  <subtitle>常绿之森</subtitle>
  <link href="https://blog.akievergarden.top/atom.xml" rel="self"/>
  
  <link href="https://blog.akievergarden.top/"/>
  <updated>2024-03-20T12:59:53.194Z</updated>
  <id>https://blog.akievergarden.top/</id>
  
  <author>
    <name>AkiEvergarden</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitlab搭建和自动化</title>
    <link href="https://blog.akievergarden.top/2024/03/20/gitlab%E6%90%AD%E5%BB%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>https://blog.akievergarden.top/2024/03/20/gitlab%E6%90%AD%E5%BB%BA%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2024-03-20T12:39:29.000Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🤖-自动化部署"><a href="#🤖-自动化部署" class="headerlink" title="🤖 自动化部署"></a>🤖 自动化部署</h1><h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><p><img src="https://upyun.akievergarden.top/blog/gitlab/6141a5f9-2cb5-4321-b596-7fe22bca4868.png" alt="过程"></p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><blockquote><p>本教程默认安装 nginx，docker 和 docker-compose</p></blockquote><p>全文参考链接： <a href="https://blog.csdn.net/amethystcity/article/details/104843735">https://blog.csdn.net/amethystcity/article/details/104843735</a></p><h2 id="1-搭建GitlabEE"><a href="#1-搭建GitlabEE" class="headerlink" title="1. 搭建GitlabEE"></a>1. 搭建GitlabEE</h2><h3 id="1-1-获取GitLab破解文件"><a href="#1-1-获取GitLab破解文件" class="headerlink" title="1.1 获取GitLab破解文件"></a>1.1 获取GitLab破解文件</h3><p>参考链接： <a href="https://developer.aliyun.com/article/893530">https://developer.aliyun.com/article/893530</a></p><ol><li><p>安装 Ruby</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update sudo </span><br><span class="line">apt install ruby-full</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>生成许可证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install gitlab-license</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>输入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; license.rb</span><br><span class="line"> </span><br><span class="line">require <span class="string">&quot;openssl&quot;</span></span><br><span class="line">require <span class="string">&quot;gitlab/license&quot;</span></span><br><span class="line">key_pair = OpenSSL::PKey::RSA.generate(2048)</span><br><span class="line">File.open(<span class="string">&quot;license_key&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(key_pair.to_pem) &#125;</span><br><span class="line">public_key = key_pair.public_key</span><br><span class="line">File.open(<span class="string">&quot;license_key.pub&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(public_key.to_pem) &#125;</span><br><span class="line">private_key = OpenSSL::PKey::RSA.new File.<span class="built_in">read</span>(<span class="string">&quot;license_key&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = private_key</span><br><span class="line">license = Gitlab::License.new</span><br><span class="line">license.licensee = &#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span> =&gt; <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Company&quot;</span> =&gt; <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Email&quot;</span> =&gt; <span class="string">&quot;example@test.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">license.starts_at = Date.new(2020, 1, 1) <span class="comment"># 开始时间</span></span><br><span class="line">license.expires_at = Date.new(2050, 1, 1) <span class="comment"># 结束时间</span></span><br><span class="line">license.notify_admins_at = Date.new(2049, 12, 1)</span><br><span class="line">license.notify_users_at = Date.new(2049, 12, 1)</span><br><span class="line">license.block_changes_at = Date.new(2050, 1, 1)</span><br><span class="line">license.restrictions = &#123;</span><br><span class="line">  active_user_count: 10000,</span><br><span class="line">&#125;</span><br><span class="line">puts <span class="string">&quot;License:&quot;</span></span><br><span class="line">puts license</span><br><span class="line">data = license.export</span><br><span class="line">puts <span class="string">&quot;Exported license:&quot;</span></span><br><span class="line">puts data</span><br><span class="line">File.open(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; |f| f.write(data) &#125;</span><br><span class="line">public_key = OpenSSL::PKey::RSA.new File.<span class="built_in">read</span>(<span class="string">&quot;license_key.pub&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = public_key</span><br><span class="line">data = File.<span class="built_in">read</span>(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>)</span><br><span class="line"><span class="variable">$license</span> = Gitlab::License.import(data)</span><br><span class="line">puts <span class="string">&quot;Imported license:&quot;</span></span><br><span class="line">puts <span class="variable">$license</span></span><br><span class="line">unless <span class="variable">$license</span></span><br><span class="line">  raise <span class="string">&quot;The license is invalid.&quot;</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.restricted?(:active_user_count)</span><br><span class="line">  active_user_count = 10000</span><br><span class="line">  <span class="keyword">if</span> active_user_count &gt; <span class="variable">$license</span>.restrictions[:active_user_count]</span><br><span class="line">    raise <span class="string">&quot;The active user count exceeds the allowed amount!&quot;</span></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.notify_admins?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on #&#123;<span class="variable">$license</span>.expires_at&#125;.&quot;</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.notify_users?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on #&#123;<span class="variable">$license</span>.expires_at&#125;.&quot;</span></span><br><span class="line">end</span><br><span class="line">module Gitlab</span><br><span class="line">  class GitAccess</span><br><span class="line">    def check(cmd, changes = nil)</span><br><span class="line">      <span class="keyword">if</span> <span class="variable">$license</span>.block_changes?</span><br><span class="line">        <span class="built_in">return</span> build_status_object(<span class="literal">false</span>, <span class="string">&quot;License expired&quot;</span>)</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">puts <span class="string">&quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class="line"><span class="variable">$license</span>.licensee.each <span class="keyword">do</span> |key, value|</span><br><span class="line">  puts <span class="string">&quot;#&#123;key&#125;: #&#123;value&#125;&quot;</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$license</span>.expired?</span><br><span class="line">  puts <span class="string">&quot;The license expired on #&#123;<span class="variable">$license</span>.expires_at&#125;&quot;</span></span><br><span class="line">elsif <span class="variable">$license</span>.will_expire?</span><br><span class="line">  puts <span class="string">&quot;The license will expire on #&#123;<span class="variable">$license</span>.expires_at&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;The license will never expire.&quot;</span></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ctrl + c 退出编辑</p></li><li><p>生成文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby license.rb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成在root下 GitLabBV.gitlab-license license_key license_key.pub 这三个文件。</p></li></ol><h3 id="1-2-使用docker-compse-完成安装"><a href="#1-2-使用docker-compse-完成安装" class="headerlink" title="1.2 使用docker-compse 完成安装"></a>1.2 使用docker-compse 完成安装</h3><p>参考轻量化运行： <a href="https://zhuanlan.zhihu.com/p/389717047">https://zhuanlan.zhihu.com/p/389717047</a></p><p>docker-compose 内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;gitlab&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;https://git.akievergarden.top&#x27;  # web站点访问地址 使用nginx进行反向代理</span></span><br><span class="line"><span class="string">        gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 222</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="comment"># Terraform</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;terraform_state_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Usage Statistics</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;usage_ping_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;sentry_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">grafana[&#x27;reporting_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭容器仓库功能</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;gitlab_default_projects_features_container_registry&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;registry_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">registry[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">registry_nginx[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 包仓库</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;packages_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;dependency_proxy_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># GitLab KAS</span></span><br><span class="line">        <span class="string">gitlab_kas[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;gitlab_kas_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mattermost</span></span><br><span class="line">        <span class="string">mattermost[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">mattermost_nginx[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Kerberos</span></span><br><span class="line">        <span class="string">gitlab_rails[&#x27;kerberos_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">sentinel[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># GitLab Pages</span></span><br><span class="line">        <span class="string">gitlab_pages[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">pages_nginx[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 禁用 PUMA 集群模式</span></span><br><span class="line">        <span class="string">puma[&#x27;worker_processes&#x27;]</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">        <span class="string">puma[&#x27;min_threads&#x27;]</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">puma[&#x27;max_threads&#x27;]</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 降低后台守护进程并发数</span></span><br><span class="line">        <span class="string">sidekiq[&#x27;max_concurrency&#x27;]</span> <span class="string">=</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监控</span></span><br><span class="line">        <span class="string">prometheus_monitoring[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">alertmanager[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">node_exporter[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">redis_exporter[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">postgres_exporter[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">pgbouncer_exporter[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">gitlab_exporter[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">grafana[&#x27;enable&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">sidekiq[&#x27;metrics_enabled&#x27;]</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;13000:80&#x27;</span> <span class="comment">#配置了external_url &#x27;https://git.akievergarden.top&#x27; 即 https可以不需要映射该端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8443:443&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;222:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/logs:/var/log/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/.license_encryption_key.pub:/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</span> </span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&#x27;json-file&#x27;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&#x27;2g&#x27;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><blockquote><p>.&#x2F;gitlab&#x2F;.license_encryption_key.pub:&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;.license_encryption_key.pub</p></blockquote><blockquote><p>将上一步骤中的.license_encryption_key.pub 使用 cp指令 复制到该目录下 <strong>.&#x2F;gitlab&#x2F;.license_encryption_key.pub</strong></p></blockquote><h3 id="1-3-nginx反向代理"><a href="#1-3-nginx反向代理" class="headerlink" title="1.3 nginx反向代理"></a>1.3 nginx反向代理</h3><p>参考部分配置（需要补全）：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  proxy_pass https://localhost:<span class="number">8443</span>;</span><br><span class="line">  proxy_set_header Host $host:$proxy_port;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header X-Forwarded-Host $http_host;</span><br><span class="line">  proxy_set_header X-Forwarded-Port $server_port;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">  proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">  proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">  proxy_redirect http:// https://;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-启动与激活"><a href="#1-4-启动与激活" class="headerlink" title="1.4 启动与激活"></a>1.4 启动与激活</h3><ol><li><p>使用 docker-compose up -d 进行镜像拉取和启动</p></li><li><p>使用指令获取密码 <code>sudo docker exec -it gitlab grep &#39;Password:&#39; /etc/gitlab/initial_root_password</code></p><p>登录时使用 root 与 方才获取 password</p></li><li><p>前往 <strong>${url}&#x2F;&#x2F;admin&#x2F;application_settings&#x2F;general</strong> 路径下，<code>添加许可证</code>中手动输入<code>GitLabBV.gitlab-license</code>中内容并激活</p></li></ol><h2 id="2-安装GitlabRunner"><a href="#2-安装GitlabRunner" class="headerlink" title="2. 安装GitlabRunner"></a>2. 安装GitlabRunner</h2><p>参考链接： <a href="https://zhuanlan.zhihu.com/p/676184653#:\~:text=Ubuntu%2022.04%20%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%20Gitlab%20Runner%201%201%29%20%E6%9B%B4%E6%96%B0,5%205%29%20%E5%A6%82%E4%BD%95%E5%9C%A8%20GitLab%20%E4%B8%8A%E6%B3%A8%E5%86%8C%20GitLab%20Runner%20%EF%BC%9F">https://zhuanlan.zhihu.com/p/676184653#:\~:text=Ubuntu%2022.04%20%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%20Gitlab%20Runner%201%201%29%20%E6%9B%B4%E6%96%B0,5%205%29%20%E5%A6%82%E4%BD%95%E5%9C%A8%20GitLab%20%E4%B8%8A%E6%B3%A8%E5%86%8C%20GitLab%20Runner%20%EF%BC%9F</a></p><h3 id="2-1-添加源"><a href="#2-1-添加源" class="headerlink" title="2.1 添加源"></a>2.1 添加源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot;</span> | sudo bash</span><br></pre></td></tr></table></figure><h3 id="2-2-执行更新"><a href="#2-2-执行更新" class="headerlink" title="2.2 执行更新"></a>2.2 执行更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><h3 id="2-3-下载"><a href="#2-3-下载" class="headerlink" title="2.3 下载"></a>2.3 下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gitlab-runner</span><br></pre></td></tr></table></figure><h3 id="2-4-添加docker权限"><a href="#2-4-添加docker权限" class="headerlink" title="2.4 添加docker权限"></a>2.4 添加docker权限</h3><p>参考链接： <a href="https://blog.csdn.net/shancyr45/article/details/118441417">https://blog.csdn.net/shancyr45/article/details/118441417</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker gitlab-runner</span><br></pre></td></tr></table></figure><h2 id="3-配置链接GitlabRunner"><a href="#3-配置链接GitlabRunner" class="headerlink" title="3. 配置链接GitlabRunner"></a>3. 配置链接GitlabRunner</h2><ol><li>选择一个项目</li><li>选择 <code>设置-CI/CD</code></li></ol><p><img src="https://upyun.akievergarden.top/blog/gitlab/d3c7bcff-44f9-4d2b-bf6e-bd1d18b987e9.png" alt="添加runner"></p><ol start="3"><li>点击 <code>展开</code></li><li>选择 <code>新建项目 runner</code> ，如下图</li></ol><p><img src="https://upyun.akievergarden.top/blog/gitlab/5052de0b-1c4a-4e8d-830a-fcf6532837cb.png" alt="添加runner选项"></p><ol start="5"><li><p>参考 <a href="https://docs.gitlab.com/16.7/ee/ci/runners/configure_runners.html#use-tags-to-control-which-jobs-a-runner-can-run">https://docs.gitlab.com/16.7/ee/ci/runners/configure_runners.html#use-tags-to-control-which-jobs-a-runner-can-run</a> 了解添加标签作用</p></li><li><p>点击最下方创建runner</p></li><li><p>根据提示完成注册</p><p><img src="https://upyun.akievergarden.top/blog/gitlab/2b45fc4a-24f5-475a-ab66-53f725c8c435.png" alt="注册"></p></li></ol><blockquote><p>注意！： gitlab-runner run 命令会在当前指令目录下创建 build目录，需要修改目录可以简单的在其他目标目录中执行该命令  <code>gitlab-runner run</code> 。其他方法请查找 gitlab-runner config.toml，一般情况下这条指令可以不执行，因为程序默认执行 <code>/usr/bin/gitlab-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --user gitlab-runner</code>，详情见 <code>额外内容</code></p></blockquote><p><br>8. 完成后效果</p><p>   <img src="https://upyun.akievergarden.top/blog/gitlab/feedd85f-ea9c-40a1-ba3a-26d3444a4b75.png" alt="效果"></p><h2 id="4-在项目中配置-gitlab-ci"><a href="#4-在项目中配置-gitlab-ci" class="headerlink" title="4. 在项目中配置.gitlab.ci"></a>4. 在项目中配置.gitlab.ci</h2><p>参考链接： <a href="https://www.cnblogs.com/baoruizhe/p/16198309.html">https://www.cnblogs.com/baoruizhe/p/16198309.html</a></p><p>:::tip<br>前往官方文档获取更多信息： <a href="https://docs.gitlab.com/16.7/ee/ci/yaml/index.html">https://docs.gitlab.com/16.7/ee/ci/yaml/index.html</a></p><p>:::</p><ol><li>选择<code>构建-流水线编辑器</code></li></ol><p><img src="https://upyun.akievergarden.top/blog/gitlab/f4425db1-57f3-49e9-a3fd-0297c8d27ea6.png" alt="选择" title=" =1760x"></p><ol start="2"><li><p>选择需要自动构建的branch</p></li><li><p>参考官方文档进行编写</p></li><li><p>参考文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本执行之后删除该镜像（为了不与下次镜像打包冲突）</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">$(</span> <span class="string">docker</span> <span class="string">images</span> <span class="string">-q</span> <span class="string">-f</span> <span class="string">dangling=true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义几个流程（job），这里是定义了三个自动化流程</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./bbsbackend</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./bbsbackend</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./bbsbackend</span></span><br><span class="line">    <span class="comment"># 通过Dockerfile生成镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">dockerfile:build</span></span><br><span class="line">    <span class="comment"># 删除已经在运行的容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-aq</span> <span class="string">--filter</span> <span class="string">name=bbsbackend)</span> ]<span class="string">;</span> <span class="string">then</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">bbsbackend;fi</span></span><br><span class="line">    <span class="comment"># 通过镜像启动容器，并把本机端口映射到容器端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="number">9090</span><span class="string">:9090</span> <span class="string">--name</span> <span class="string">bbsbackend</span> <span class="string">org.sevenstar/bbsbackend:0.0.1-SNAPSHOT</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>选择下方提交更改以触发自动构建</p></li><li><p>以下是自动构建效果</p><p><img src="https://upyun.akievergarden.top/blog/gitlab/6053190e-4979-4078-ac20-802ce7e8b3b7.png" alt="效果"></p></li></ol><h2 id="5-配置计划性作业"><a href="#5-配置计划性作业" class="headerlink" title="5. 配置计划性作业"></a>5. 配置计划性作业</h2><p>前往图中位置进行创建</p><p><img src="https://upyun.akievergarden.top/blog/gitlab/5a7a1ffa-7d98-4c42-ae94-6a0201f30f09.png" alt="新建计划"></p><h2 id="6-（可选）配置SMTP"><a href="#6-（可选）配置SMTP" class="headerlink" title="6. （可选）配置SMTP"></a>6. （可选）配置SMTP</h2><ol><li>前往编辑挂载文件 .&#x2F;gitlab&#x2F;config&#x2F;gitlab.rb</li><li>在 80行左右 进行编辑，参考链接： <a href="https://blog.csdn.net/T748588330/article/details/79915074">https://blog.csdn.net/T748588330/article/details/79915074</a>&#x2F;</li></ol><p>\</p><h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><blockquote><p>需要在gitlab.cli中执行root权限操作</p></blockquote><p><a href="https://blog.csdn.net/white_pure/article/details/108039238">https://blog.csdn.net/white_pure/article/details/108039238</a></p><p>安装gitlab-runner构建机时默认会将用户设置为：gitlab-runner，该设置会使编写.gitlab-ci.yml的脚本，操作带来一些权限上的问题。</p><p>为了解决这些权限带来的问题，我将gitlab-runner构建机上的默认用户设置为root。</p><p>请注意：</p><blockquote><p>这种方式虽然简单粗暴，当然也会带来一些弊端，比如：通过.gitlab-ci.yml脚本进行操作文件（删除、修改时）要格外小心。</p></blockquote><ul><li>通过ps aux|grep gitlab-runner命令查看gitlab-runner进程，可以查看到gitlab-runner的工作目录和默认用户等一系列相关信息。</li><li>通过该命令sudo gitlab-runner uninstall可以卸载掉gitlab-runner默认用户。</li><li>重新安装gitlab-runner并将用户设置为root  gitlab-runner install –working-directory &#x2F;home&#x2F;gitlab-runner –user root。</li><li>sudo service gitlab-runner restart重启gitlab-runner。</li></ul><p>再通过第一步的命令查看gitlab-runner看默认用户是否变成root。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;🤖-自动化部署&quot;&gt;&lt;a href=&quot;#🤖-自动化部署&quot; class=&quot;headerlink&quot; title=&quot;🤖 自动化部署&quot;&gt;&lt;/a&gt;🤖 自动化部署&lt;/h1&gt;&lt;h1 id=&quot;执行过程&quot;&gt;&lt;a href=&quot;#执行过程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.akievergarden.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="gitlab" scheme="https://blog.akievergarden.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从部署测试</title>
    <link href="https://blog.akievergarden.top/2023/11/19/Redis%E4%B8%BB%E4%BB%8E%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.akievergarden.top/2023/11/19/Redis%E4%B8%BB%E4%BB%8E%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95/</id>
    <published>2023-11-19T17:24:18.000Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-docker-redis-进行主从复制测试"><a href="#使用-docker-redis-进行主从复制测试" class="headerlink" title="使用 docker redis 进行主从复制测试"></a>使用 docker redis 进行主从复制测试</h1><h2 id="docker-compose-安装redis"><a href="#docker-compose-安装redis" class="headerlink" title="docker compose 安装redis"></a>docker compose 安装redis</h2><p>docker-compose 安装 master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:latest</span><br><span class="line">    container_name: redis-master</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;6001:6379&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./redis.conf:/usr/local/etc/redis/redis.conf</span><br><span class="line">      - ./logs:/logs</span><br><span class="line">    <span class="comment">#配置文件启动</span></span><br><span class="line">    <span class="built_in">command</span>: redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"># Redis配置文件样例</span><br><span class="line"> </span><br><span class="line"># 单位注意事项：当需要内存大小时，可以指定，它以通常的形式 1k 5GB 4M 等等：</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># 单位不区分大小写，所以 1GB 1Gb 1gB 都是一样的</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################### INCLUDES（包含） ##############################</span><br><span class="line">#这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。等同import导入</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################## GENERAL（通配）##################################</span><br><span class="line"> </span><br><span class="line"># 是否在后台执行，yes：后台运行；no：不是后台运行（老版本默认）</span><br><span class="line">daemonize no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 当Redis以上述守护进程方式运行时，Redis默认会把进程文件写入/var/run/redis.pid文件</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 是否开启保护模式。如配置里没有指定bind和密码。开启该参数后，redis只允许本地访问，拒绝外部访问</span><br><span class="line"># 要是开启了密码和bind，可以开启。否则最好关闭，设置为no。</span><br><span class="line">protected-mode no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># Redis监听端口号，默认为6379，如果指定0端口，表示Redis不监听TCP连接</span><br><span class="line">port 6379</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 只允许来自bind指定网卡的Redis请求。如没有指定，则可以接受来自任意一个网卡的Redis请求</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#配置unix socket来让redis支持监听本地连接。</span><br><span class="line"># unixsocket /var/run/redis/redis.sock</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#配置unix socket使用文件的权限</span><br><span class="line"># unixsocketperm 755</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 连接超时时间，单位秒；超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0</span><br><span class="line">timeout 0</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值</span><br><span class="line"># 使用keepalive有两个好处:</span><br><span class="line">#  1) 检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。</span><br><span class="line">#  2) 在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需两倍的设置值</span><br><span class="line">tcp-keepalive 0</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定日志记录级别，四个级别：</span><br><span class="line"># 1) debug：很多信息，方便开发、测试</span><br><span class="line"># 2) verbose：许多有用的信息，但是没有debug级别信息多（默认）</span><br><span class="line"># 3) notice：适当的日志级别，适合生产环境</span><br><span class="line"># 4) warning：只记录非常重要/关键的消息</span><br><span class="line">loglevel verbose</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定日志文件记录的位置。logfile “”：标准输出。则日志将会发送给/dev/null</span><br><span class="line">logfile “”  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 是否将日志输出到系统日志</span><br><span class="line"># syslog-enabled no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># syslog的标识符。</span><br><span class="line"># syslog-ident redis</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 日志的来源、设备；指定系统日志工具。必须是 USER 或介于 LOCAL0-LOCAL7 之间</span><br><span class="line"># syslog-facility local0</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 数据库的数量，默认数据库为0。可通过”SELECT [index]“命令指定数据库</span><br><span class="line">databases 16</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">########################### SNAPSHOTTING (快照方式)  ###########################</span><br><span class="line"> </span><br><span class="line"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"># 注释掉“save”这一行配置项就可以让保存数据库功能失效</span><br><span class="line"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span><br><span class="line"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span><br><span class="line"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作</span><br><span class="line"># 可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定存储至本地数据库时是否压缩数据，耗cpu资源，默认为yes，Redis采用LZF压缩</span><br><span class="line"># 如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">rdbcompression yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 保存rdb文件时，是否进行错误检查校验。</span><br><span class="line"># 从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性</span><br><span class="line"># 但是在保存rdb文件的时候，会有大概10%的性能损耗，如果你追求高性能，可以关闭该配置。</span><br><span class="line">rdbchecksum yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定本地数据库文件名（rdb文件的名称），默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="line"># 指定本地数据库存放目录（dump.rdb文件存放目录），rdb、aof文件也会写在这个目录</span><br><span class="line"># 注意，这里只能指定一个目录，不能指定文件名（文件名由上一个dbfilename配置项指定）</span><br><span class="line">dir ./</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################# REPLICATION（主从复制） #############################</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span><br><span class="line"># 设置当本机为slav服务时，设置master服务的ip地址及端口，Redis启动时，自动从master进行数据同步</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 如master设置了requirepass密码，slave用此选项指定master认证密码</span><br><span class="line"># 下文的“requirepass”配置项可以指定密码</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 从库同主机失去连接或者复制正在进行，从机库的两种运行方式</span><br><span class="line"># 当slave与master之间的连接断开或slave正在与master进行数据同步时，如果有slave请求</span><br><span class="line"># 1) yes：slave仍然响应请求，此时可能有问题</span><br><span class="line"># 2) no：slave会返回&quot;SYNC with master in progress&quot;错误信息。但INFO和SLAVEOF命令除外。</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。</span><br><span class="line">slave-read-only yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或# 者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。</span><br><span class="line"># 有2种方式：</span><br><span class="line">#   1) disk：master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。</span><br><span class="line">#   2) socket：master创建一个新的进程，直接把rdb文件以socket的方式发给slave。</span><br><span class="line"># disk方式时，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。</span><br><span class="line"># socket方式就得一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># diskless复制的延迟时间，防止设置为0。一旦复制开始</span><br><span class="line"># 节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># slave根据指定的时间间隔向服务器发送ping请求。默认10秒。</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 复制连接超时时间。master和slave都有超时时间的设置。</span><br><span class="line"># master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。</span><br><span class="line"># slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。</span><br><span class="line"># 需注意repl-timeout需设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。</span><br><span class="line"># repl-timeout 60</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 是否禁止复制tcp链接的tcp nodelay参数，默认是no，即使用tcp nodelay。</span><br><span class="line"># 如master设置了yes，在把数据复制给slave时，会减少包的数量和更小的网络带宽。</span><br><span class="line"># 但这也可能带来数据的延迟。默认我们推荐更小的延迟，但在数据量传输很大的场景下，建议选择yes。</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。</span><br><span class="line"># 这样在slave离线时，无需完全复制master的数据，如果可以执行部分同步，只需把缓冲区的部分数据复制# 给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有</span><br><span class="line"># slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span><br><span class="line"># repl-backlog-size 5mb</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl设置该时间长度。单位为秒</span><br><span class="line"># repl-backlog-ttl 3600</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 当master不可用，Sentinel会根据slave的优先级选举一个master。</span><br><span class="line"># 最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span><br><span class="line">slave-priority 100</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># master停止写入的方式，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的</span><br><span class="line"># slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，</span><br><span class="line"># 但能避免没有足够健康的slave时，master不能写入来避免数据丢失。设置为0是关闭该功能。</span><br><span class="line"># min-slaves-to-write 3</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 延迟小于min-slaves-max-lag 秒的slave才认为是健康的slave。</span><br><span class="line"># min-slaves-max-lag 10</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################## SECURITY（安全） ################################</span><br><span class="line"> </span><br><span class="line"># 配置redis连接认证密码</span><br><span class="line"># 如果配置了，则客户端在连接Redis时需通过auth &lt;password&gt;命令提供密码（默认关闭）</span><br><span class="line"># 注意：因为redis太快了，每秒可认证15w次密码，简单的很容易被攻破，最好使用一个更复杂的密码</span><br><span class="line"># requirepass 114514!!!</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令</span><br><span class="line"># 这样用户不能使用，而内部工具还能接着使用。</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 设置成一个空的值，可以禁止一个命令</span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">################################ LIMITS（限制）#################################</span><br><span class="line"> </span><br><span class="line"># 设置连上redis的最大客户端连接数量。默认10000。设置0表示不作限制。</span><br><span class="line"># 超出此数，Redis会关闭新的连接并向客户端返回max Number of clients reached错误</span><br><span class="line"># redis不区分连接是客户端连接还是内部打开文件或和slave连接等，故maxclients最小建议设置到32</span><br><span class="line"># maxclients 10000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中</span><br><span class="line"># 当内存满了，配合maxmemory-policy策略进行处理</span><br><span class="line"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 内存容量超过maxmemory后的处理策略如下几种策略：</span><br><span class="line">#  1) volatile-lru：只对设置过期时间的key进行LRU算法删除（默认）</span><br><span class="line">#  2) allkeys-lru：删除不经常使用的key</span><br><span class="line">#  3) volatile-random：随机删除即将过期的key</span><br><span class="line">#  4) allkeys-&gt;random：随机删除一个key</span><br><span class="line">#  5) volatile-ttl：删除即将过期的的key</span><br><span class="line">#  6) noeviction：不移除任何key，对于写命令返回报错</span><br><span class="line"># maxmemory-policy volatile-lru</span><br><span class="line"> </span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line"># lru检测的样本数。</span><br><span class="line"># 使用lru或ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span><br><span class="line"># maxmemory-samples 3</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">########################## APPEND ONLY MODE （附加模式） ###########################</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># AOF持久化，指定是否在每次更新操作后进行日志记录，默认redis是异步（快照）的把数据写入本地磁盘</span><br><span class="line"># redis默认使用的是rdb方式持久化，此方式在许多应用中已足够用。</span><br><span class="line"># 但redis如果中途宕机，会导致可能有几分钟的数据丢失，按照上面save条件来策略进行持久化</span><br><span class="line"># Append Only File是另一种持久化方式，可提供更好的持久化特性。</span><br><span class="line"># Redis会把每次写入的数据在接收后都写入appendonly.aof 文件</span><br><span class="line"># 每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span><br><span class="line">appendonly no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定aof文件名，默认为appendonly.aof</span><br><span class="line"># appendfilename appendonly.aof</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># AOF持久化三种同步策略：</span><br><span class="line">#   1) no：不同步（不执行fsync），数据不会持久化</span><br><span class="line">#   2) always：每次有数据发生变化时都会写入appendonly.aof（慢，安全）</span><br><span class="line">#   3) everysec：每秒同步一次到appendonly.aof，可能会导致丢失这1s数据（折中选择，默认值）</span><br><span class="line">appendfsync everysec</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 在AOF重写或写入rdb文件时，会执行大量IO</span><br><span class="line"># 对于everysec和always的AOF模式来说，执行fsync会造成阻塞过长时间</span><br><span class="line"># yes：表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入</span><br><span class="line"># 默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># AOF自动重写配置。当目前AOF文件大小超过上一次重写的aof文件大小的百分之多少进行重写</span><br><span class="line"># 即当AOF文件增长到一定大小时，Redis能调用bgrewriteaof对日志文件进行重写。</span><br><span class="line"># 当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 设置允许重写的最小AOF文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################ LUA SCRIPTING（LUA 脚本） ###########################</span><br><span class="line"> </span><br><span class="line"># 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。</span><br><span class="line"># 只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。</span><br><span class="line"># 要是已经调用了write，只能用第二个命令杀。</span><br><span class="line">lua-time-limit 5000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################ REDIS CLUSTER（Redis集群） ###########################</span><br><span class="line"> </span><br><span class="line"># 集群开关，默认是不开启集群模式。</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。</span><br><span class="line"># 这个文件无需手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，# 请确保与实例运行的系统中配置文件名称不冲突</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 节点互连超时的阀值。集群节点超时毫秒数</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 在进行故障转移时，全部slave会请求申请为master，有些slave可能与master断开连接一段时间了，</span><br><span class="line"># 导致数据过于陈旧，这种slave不该提升为master。该参数判断slave与master断线的时间是否过长。</span><br><span class="line"># 判断方法是：比较slave断开连接的时间和</span><br><span class="line">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</span><br><span class="line"># 如果节点超时时间为三十秒, 并且slave-validity-factor为10</span><br><span class="line"># 假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 </span><br><span class="line"># cluster-slave-validity-factor 10</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，</span><br><span class="line"># 那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span><br><span class="line"># cluster-migration-barrier 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。</span><br><span class="line"># 设置为no，可以在slot没有全部分配的时候提供服务。</span><br><span class="line"># 不建议打开该配置，这样会造成分区时，小分区的master一直在接受写请求，而造成很长时间数据不一致。</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################## SLOW LOG （慢日志）#############################</span><br><span class="line"> </span><br><span class="line"># slog log是用来记录redis运行中执行比较慢的命令耗时。</span><br><span class="line"># 当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span><br><span class="line"># 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒</span><br><span class="line"># 所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 慢查询日志长度。当一个新的命令被写进日志时，最老的那个记录会被删掉。</span><br><span class="line"># 这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################ VIRTUAL MEMORY（ 虚拟内存） ###########################</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定是否启用虚拟内存机制，默认no，</span><br><span class="line"># VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上（内存占用多，最好关闭）</span><br><span class="line"># 访问多的页面由磁盘自动换出到内存中</span><br><span class="line"># vm-enabled no</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 虚拟内存文件位置，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line"># Redis交换文件最好的存储是SSD（固态硬盘）</span><br><span class="line">#vm-swap-file /tmp/redis.swap</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># redis使用的最大内存上限，保护redis不会因过多使用物理内存影响性能</span><br><span class="line"># 将大于vm-max-memory的数据存入虚拟内存，但无论设置多少，所有索引数据都是内存存储的（即keys）</span><br><span class="line"># 当vm-max-memory设置为0时，所有value都存在于磁盘。默认值为0</span><br><span class="line">#vm-max-memory 0</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># Redis swap文件分成了很多的page，一个对象可以保存在多个page上面</span><br><span class="line"># 但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span><br><span class="line"># 建议：</span><br><span class="line">#    如果存储很多小对象，page大小设置为32或64字节；</span><br><span class="line">#    如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span><br><span class="line"># 每个页面的大小设置为32字节</span><br><span class="line">#vm-page-size 32</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 设置swap文件中页面数量</span><br><span class="line"># 由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个页将消耗1byte的内存</span><br><span class="line"># swap空间总容量为 vm-page-size * vm-pages</span><br><span class="line">#vm-pages 134217728</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 设置访问swap文件的线程数，最后不要超过机器的核数</span><br><span class="line"># 如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span><br><span class="line">#vm-max-threads 4</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">############################ ADVANCED CONFIG（高级配置） ###########################</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">## 哈希表中元素（条目）总个数&lt;=512个，采用ziplist，否则使用hash</span><br><span class="line">#hash-max-zipmap-entries 512   </span><br><span class="line"># </span><br><span class="line">## 哈希表中每个value的长度&lt;=64字节时，采用ziplist，否则使用hash</span><br><span class="line">#hash-max-zipmap-value 64     </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## list元素&lt;=512个，采用ziplist，否则用linkedlist</span><br><span class="line">#list-max-ziplist-entries 512</span><br><span class="line"># </span><br><span class="line">## list内某个元素大小&lt;=64字节时，采用ziplist，否则用linkedlist </span><br><span class="line">#list-max-ziplist-value 64</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## set内元素数量&lt;=512个，且都是整数型值，采用inset，否则使用hashtable</span><br><span class="line">#set-max-intset-entries 512</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## zset内元素数量&lt;=128个，采用ziplist，否则用skiplist跳表 </span><br><span class="line">#zset-max-ziplist-entries 128</span><br><span class="line"># </span><br><span class="line">## zset内某个元素大小&lt;=64字节时，采用ziplist，否则用skiplist跳表 </span><br><span class="line">#zset-max-ziplist-value 64</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## value大小 &lt;= hll-sparse-max-bytes使用稀疏数据结构（sparse）</span><br><span class="line">## value大小 &gt; hll-sparse-max-bytes使用稠密的数据结构（dense）。</span><br><span class="line">## 一个比16000大的value是几乎没用的，建议的value大概为3000。</span><br><span class="line">## 如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</span><br><span class="line">#hll-sparse-max-bytes 3000</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。</span><br><span class="line">## 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话</span><br><span class="line">## 把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span><br><span class="line">## 指定是否激活重置哈希，默认为开启</span><br><span class="line">#activerehashing yes</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## 对客户端输出缓冲进行限制,可以强迫那些不从服务器读取数据的客户端断开连接</span><br><span class="line">## 用来强制关闭传输缓慢的客户端。</span><br><span class="line">## 对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit</span><br><span class="line">## normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</span><br><span class="line">#client-output-buffer-limit normal 0 0 0</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## 对于slave client和 MONITER client，如果client-output-buffer一旦超过256mb</span><br><span class="line">## 又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span><br><span class="line">#client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，</span><br><span class="line">## 那么服务器就会立即断开客户端连接。</span><br><span class="line">#client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## redis执行任务的频率为1s除以hz。</span><br><span class="line">#hz 10</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">## 在AOF重写时，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。</span><br><span class="line">## 这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</span><br><span class="line">#aof-rewrite-incremental-fsync yes</span><br><span class="line"># </span><br></pre></td></tr></table></figure><p>docker-compose 安装 slave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:latest</span><br><span class="line">    container_name: redis-slave</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;6002:6379&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./redis.conf:/usr/local/etc/redis/redis.conf</span><br><span class="line">      - ./logs:/logs</span><br><span class="line">    <span class="comment">#配置文件启动</span></span><br><span class="line">    <span class="built_in">command</span>: redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">73059d0c67e0   redis:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 minutes ago   Up 2 minutes   0.0.0.0:6002-&gt;6379/tcp, :::6002-&gt;6379/tcp   redis-slave</span><br><span class="line">772912adc2ba   redis:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   8 minutes ago   Up 6 minutes   0.0.0.0:6001-&gt;6379/tcp, :::6001-&gt;6379/tcp   redis-master</span><br></pre></td></tr></table></figure><h2 id="从节点设置"><a href="#从节点设置" class="headerlink" title="从节点设置"></a>从节点设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">192.168.116.130:6002&gt; replicaof 192.168.116.130 6001</span><br><span class="line">OK</span><br><span class="line">192.168.116.130:6002&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.116.130</span><br><span class="line">master_port:6001</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:4</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:14</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5af78b7d5a9c7e6e83222284ef0a9a08f3bcc0ef</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在6001端口的redis写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.116.130:6001&gt; <span class="built_in">set</span> aki akievergarden</span><br><span class="line">OK</span><br><span class="line">192.168.116.130:6001&gt; </span><br></pre></td></tr></table></figure><p>在6002端口的redis读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.116.130:6002&gt; get aki</span><br><span class="line">akievergarden</span><br><span class="line">192.168.116.130:6002</span><br></pre></td></tr></table></figure><p>通过输入<code>replicaof no one</code>，即可变回Master角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">192.168.116.130:6002&gt; replicaof no one</span><br><span class="line">OK</span><br><span class="line">192.168.116.130:6002&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:d7db775eb6f89e2f047edc81bd8ef9a5c754e679</span><br><span class="line">master_replid2:5af78b7d5a9c7e6e83222284ef0a9a08f3bcc0ef</span><br><span class="line">master_repl_offset:513</span><br><span class="line">second_repl_offset:514</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:499</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-docker-redis-进行主从复制测试&quot;&gt;&lt;a href=&quot;#使用-docker-redis-进行主从复制测试&quot; class=&quot;headerlink&quot; title=&quot;使用 docker redis 进行主从复制测试&quot;&gt;&lt;/a&gt;使用 docker redi</summary>
      
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://blog.akievergarden.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的Redis编译安装</title>
    <link href="https://blog.akievergarden.top/2023/10/15/Linux%E4%B8%8B%E7%9A%84Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.akievergarden.top/2023/10/15/Linux%E4%B8%8B%E7%9A%84Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</id>
    <published>2023-10-15T09:12:13.000Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说到NoSQL果然就要提到Redis了，本文中介绍了如何在Linux上安装Redis的过程。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>在 <a href="https://redis.io/download/">https://redis.io/download/</a> 中找到download x.x.x 的链接，右键复制下载地址,例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/redis/redis/archive/7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>在Linux的命令行使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/redis/redis/archive/7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>注意在那之前进行权限提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>然后redis的tar.gz 压缩包就在 &#x2F;root 的目录下，进行解压操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf 7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>其中 -zxf 分别是：</p><ol><li>-z：使用 gzip 压缩&#x2F;解压缩。这个选项告诉 tar 命令使用 gzip 压缩算法来处理文件。</li><li>-x：提取文件。这个选项告诉 tar 命令要从归档文件中提取文件。</li><li>-f：指定归档文件。这个选项后面需要接归档文件的路径或名称。</li></ol><p>解压之后能获得一个 &#x2F;redis.x.x.x 的文件夹</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>将解压后的文件夹移动到&#x2F;usr&#x2F;local下，并命名为新的文件夹redis(当然你不在这么做也行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> redis-7.2.1 /usr/local/redis</span><br></pre></td></tr></table></figure><p>执行以下程序进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><p>其中PREFIX 为指定编译安装后的目录，如果不指定 Linux会将可执行文件存放在&#x2F;usr&#x2F;local&#x2F;bin目录，库文件会存放在&#x2F;usr&#x2F;local&#x2F;lib目录</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>完成安装之后 在&#x2F;usr&#x2F;local&#x2F;redis目录下会多出 bin可执行文件目录</p><p>在运行之前 先了解 redis.conf ，如同字面意思，它是配置文件。根据文件中前几行的描述，可以这样使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line">./bin/redis-server ./redis.conf <span class="comment">#在/usr/local/redis 目录下</span></span><br></pre></td></tr></table></figure><p>文件中有大部分注释的英文解释，以下只讲几个配置时用得上的</p><p>1.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span><br><span class="line"><span class="comment"># for connections from all available network interfaces on the host machine.</span></span><br><span class="line"><span class="comment"># It is possible to listen to just one or multiple selected interfaces using</span></span><br><span class="line"><span class="comment"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span><br><span class="line"><span class="comment"># Each address can be prefixed by &quot;-&quot;, which means that redis will not fail to</span></span><br><span class="line"><span class="comment"># start if the address is not available. Being not available only refers to</span></span><br><span class="line"><span class="comment"># addresses that does not correspond to any network interface. Addresses that</span></span><br><span class="line"><span class="comment"># are already in use will always fail, and unsupported protocols will always BE</span></span><br><span class="line"><span class="comment"># silently skipped.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span></span><br><span class="line"><span class="comment"># bind * -::*                     # like the default, all available interfaces</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span><br><span class="line"><span class="comment"># internet, binding to all the interfaces is dangerous and will expose the</span></span><br><span class="line"><span class="comment"># instance to everybody on the internet. So by default we uncomment the</span></span><br><span class="line"><span class="comment"># following bind directive, that will force Redis to listen only on the</span></span><br><span class="line"><span class="comment"># IPv4 and IPv6 (if available) loopback interface addresses (this means Redis</span></span><br><span class="line"><span class="comment"># will only be able to accept client connections from the same host that it is</span></span><br><span class="line"><span class="comment"># running on).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span><br><span class="line"><span class="comment"># COMMENT OUT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You will also need to set a password unless you explicitly disable protected</span></span><br><span class="line"><span class="comment"># mode.</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 -::1</span><br></pre></td></tr></table></figure></p><pre><code>默认下 Redis只允许本机链接；如果需要局域网或者外网的另一台主机链接的话需要bind链接主机的ip地址，如果希望任何的主机都能链接的话，修改或加入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> * -::*</span><br></pre></td></tr></table></figure></code></pre><p>2.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># By default protected mode is enabled. You should disable it only if</span></span><br><span class="line"><span class="comment"># you are sure you want clients from other hosts to connect to Redis</span></span><br><span class="line"><span class="comment"># even if no authentication is configured.</span></span><br><span class="line">protected-mode <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><br>    还需要关闭protected-mode，才能从另一台主机链接<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></p><p>3.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379 (IANA #815344).</span></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure><br>    更改port 后的内容以更改端口</p><p>4.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span></span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure><br>    以守护线程运行Redis，当Redis以守护进程方式运行时，它会在&#x2F;var&#x2F;run&#x2F;redis.pid写入一个pid文件<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure><br>5.<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IMPORTANT <span class="doctag">NOTE:</span> starting with Redis 6 &quot;requirepass&quot; is just a compatibility</span></span><br><span class="line"><span class="comment"># layer on top of the new ACL system. The option effect will be just setting</span></span><br><span class="line"><span class="comment"># the password for the default user. Clients will still authenticate using</span></span><br><span class="line"><span class="comment"># AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span></span><br><span class="line"><span class="comment"># if they follow the new protocol: both will work.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The requirepass is not compatible with aclfile option and the ACL LOAD</span></span><br><span class="line"><span class="comment"># command, these will cause requirepass to be ignored.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br></pre></td></tr></table></figure><br>    通过 requirepass xxxxxx 可以设置默认用户认证密码，至少6位字符，例如<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 1145141919810</span><br></pre></td></tr></table></figure></p><p>最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-server ./redis.conf </span><br></pre></td></tr></table></figure><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>如果你需要完成Redis的开机启动的话，参考以下优秀文章：<br><a href="https://blog.csdn.net/m0_60721514/article/details/123777643">https://blog.csdn.net/m0_60721514/article/details/123777643</a> </p>]]></content>
    
    
    <summary type="html">说到NoSQL果然就要提到Redis了，本文中介绍了如何在Linux上安装Redis的过程。</summary>
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://blog.akievergarden.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>JNI本地方法调用初探</title>
    <link href="https://blog.akievergarden.top/2023/10/06/JNI%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
    <id>https://blog.akievergarden.top/2023/10/06/JNI%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2023-10-06T02:24:12.160Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 java 中可以在方法中指定关键字 native 使得java可以调用本地代码中得方法，如c\cpp。</p><p>本文描述了如何简单的跑通了在java中调用本地的一个cpp方法的过程。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>IntelliJ IDEA 2022.3.2 编写java代码</li><li>CLion 2023.2.2 编写cpp代码</li></ol><h2 id="java-代码"><a href="#java-代码" class="headerlink" title="java 代码"></a>java 代码</h2><h3 id="创建一个-main-文件"><a href="#创建一个-main-文件" class="headerlink" title="创建一个 main 文件"></a>创建一个 main 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">114</span>,<span class="number">514</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span>  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中使用native 关键字，表示该方法为本地方法</p><h3 id="构建该文件-以下是文件树结构"><a href="#构建该文件-以下是文件树结构" class="headerlink" title="构建该文件, 以下是文件树结构"></a>构建该文件, 以下是文件树结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─out</span><br><span class="line">│  └─production</span><br><span class="line">│      └─javaNative</span><br><span class="line">│              Main.class</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">     Main.java</span><br></pre></td></tr></table></figure><h3 id="生成该本地方法的头文件"><a href="#生成该本地方法的头文件" class="headerlink" title="生成该本地方法的头文件"></a>生成该本地方法的头文件</h3><p>在项目的根目录的powershell或者cmd中使用以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -classpath out/production/javaNative -d ./jni Main</span><br></pre></td></tr></table></figure><p>指令解释：</p><ol><li>javah: 表示要运行javah命令。javah命令用于生成Java类的本地方法接口（Native Method Interface，简称JNI）头文件。它可以根据Java类中声明的本地方法生成对应的C&#x2F;C++头文件，以便在本地代码中实现这些方法。</li><li>-classpath out&#x2F;production&#x2F;javaNative: 指定编译后的Java类文件所在的类路径。这里编译后的类文件位于out&#x2F;production&#x2F;javaNative目录中。</li><li>-d .&#x2F;jni: 指定生成的JNI头文件的输出目录。这里将生成的头文件放在当前目录下的jni目录中。</li><li>Main: 指定要生成JNI头文件的Java类名。这里生成的JNI头文件将与名为Main的Java类相关联。</li></ol><h3 id="之后就能在-x2F-jni-文件夹下看到-Main-h-的头文件"><a href="#之后就能在-x2F-jni-文件夹下看到-Main-h-的头文件" class="headerlink" title="之后就能在 &#x2F;jni 文件夹下看到 Main.h 的头文件"></a>之后就能在 &#x2F;jni 文件夹下看到 Main.h 的头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class Main */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Class:     Main</span></span><br><span class="line"><span class="comment">* Method:    sum</span></span><br><span class="line"><span class="comment">* Signature: (II)I &lt;--(II)表明传入两个Int类型参数，I表明返回一个Int类型结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_Main_sum <span class="comment">//&lt;-- 为要求实现的方法</span></span><br><span class="line">(JNIEnv *, jclass, jint, jint);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="cpp-代码"><a href="#cpp-代码" class="headerlink" title="cpp 代码"></a>cpp 代码</h2><h3 id="使用Clion"><a href="#使用Clion" class="headerlink" title="使用Clion"></a>使用Clion</h3><ol><li><p>创建一个项目</p></li><li><p>在项目中的 CMakeList.txt中引入方才java编译使用的jdk的include目录和include&#x2F;win32文件，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include_directories(&quot;C:/Program Files/Eclipse Adoptium/jdk-8.0.382.5-hotspot/include&quot;)</span><br><span class="line"></span><br><span class="line">include_directories(&quot;C:/Program Files/Eclipse Adoptium/jdk-8.0.382.5-hotspot/include/win32&quot;)</span><br></pre></td></tr></table></figure></li><li><p>将 &#x2F;jni 文件夹下看到 Main.h 的头文件 加入项目的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  CMakeLists.txt</span><br><span class="line"> │  main.cpp</span><br><span class="line"> │  Main.h &lt;---- 方在与main.cpp 同级别</span><br><span class="line"> │</span><br><span class="line"> ├─.idea</span><br><span class="line"> │      ...</span><br><span class="line"> │</span><br><span class="line"> └─cmake-build-debug</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></li></ol><h3 id="编写cpp实现头文件中要求实现的方法"><a href="#编写cpp实现头文件中要求实现的方法" class="headerlink" title="编写cpp实现头文件中要求实现的方法"></a>编写cpp实现头文件中要求实现的方法</h3><ol><li><p>在 main.cpp 文件中写入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Main.h&quot;</span></span></span><br><span class="line"> <span class="function">JNIEXPORT jint JNICALL <span class="title">Java_Main_sum</span></span></span><br><span class="line"><span class="function">         <span class="params">(JNIEnv *, jclass, jint a, jint b)</span></span>&#123; <span class="comment">//仅仅使用了后边的jint</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>JNIEXPORT jint JNICALL: 这是一个用于指定函数导出的宏定义。它告诉编译器将这个函数作为动态链接库的导出函数。JNIEXPORT是一个宏，用于指定函数的导出类型。jint表示函数的返回类型是int。</li><li>Java_Main_sum: 这是一个约定的命名规则，用于表示这个JNI函数与Java类Main中的sum方法相对应。在JNI中，函数名的命名规则是Java_&lt;类名&gt;_&lt;方法名&gt;。</li><li>(JNIEnv *, jclass, jint, jint): 这是函数的参数列表。在JNI中，函数的前两个参数分别是JNIEnv和jclass类型的指针，用于与Java虚拟机进行交互。后面的两个参数是jint类型的整数参数。</li></ol></li><li><p>jni中的类型与Java的基本类型相似，仅仅需要在java的基本类型前加入j；例如Java中Boolean，在jni中则为jboolean；Byte&lt;–&gt;jbyte 。。。</p></li></ol><h3 id="编译生成动态库"><a href="#编译生成动态库" class="headerlink" title="编译生成动态库"></a>编译生成动态库</h3><p>在项目的根目录的powershell或者cmd中使用以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.cpp -I &quot;C:/Program Files/Eclipse Adoptium/jdk-<span class="number">8</span>.<span class="number">0</span>.<span class="number">382</span>.<span class="number">5</span>-hotspot/include&quot; -I &quot;C:/Program Files/Eclipse Adoptium/jdk-<span class="number">8</span>.<span class="number">0</span>.<span class="number">382</span>.<span class="number">5</span>-hotspot/include/win32&quot; -shared -o main.dll -lstdc++</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>gcc main.cpp 使用gcc编译main.cpp文件</li><li>-I “…” 引入文件</li><li>-shared 指定生成动态链接库</li><li>-o main.dll 指定生成文件名字</li><li>-lstdc++ 链接windows上的cpp标准库</li></ol><p>最后就可以在项目的更目录到 main.dll 文件了</p><h2 id="在Java中使用该dll文件"><a href="#在Java中使用该dll文件" class="headerlink" title="在Java中使用该dll文件"></a>在Java中使用该dll文件</h2><ol><li>将生成的main.dll文件放在方才的java项目的更目录</li><li>在java Main.java 中加载该.dll文件，使用以下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 System.getProperty(&quot;user.dir&quot;) 获取项目的路径</span></span><br><span class="line">        System.load(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/mian.dll&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">114</span>,<span class="number">514</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span>  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译运行得到结果：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">628</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>尚不清楚 JNIEnv *, jclass 的作用，留有之后探究。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 java 中可以在方法中指定关键字 native 使得java可以调用本地代码中得方法，如c\cpp。&lt;/p&gt;
&lt;p&gt;本文描述了如何简单</summary>
      
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JVM" scheme="https://blog.akievergarden.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>openjdk-8的编译</title>
    <link href="https://blog.akievergarden.top/2023/09/28/openjdk-8%E7%9A%84%E7%BC%96%E8%AF%91/"/>
    <id>https://blog.akievergarden.top/2023/09/28/openjdk-8%E7%9A%84%E7%BC%96%E8%AF%91/</id>
    <published>2023-09-28T09:19:42.567Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手动编译一个jdk8"><a href="#手动编译一个jdk8" class="headerlink" title="手动编译一个jdk8"></a>手动编译一个jdk8</h1><p>学习JVM自然是要先自己构建一个jdk,做到管中窥豹，从而不会无从下手。</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>本次构建jdk-8使用的是 ubuntu-22.04.3-live-server-amd64，内核版本为：GNU&#x2F;Linux 5.15.0-84-generic x86_64</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>基于VMware 的虚拟机，分配host AMD Ryzen 7 3800X 8-Core Processor 8核心 8GB内存</p><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p>Jetbrians Clion 使用Remote Development链接Ubuntu虚拟机</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>根据 <a href="https://hg.openjdk.org/jdk8/jdk8/raw-file/tip/README-builds.html">https://hg.openjdk.org/jdk8/jdk8/raw-file/tip/README-builds.html</a> 得知道：编译环境推荐为：</p><ol><li>gcc: 4.8</li><li>g++: 4.8</li><li>make: 3.81</li><li>bootstrap JDK: OpenJDK8</li></ol><h2 id="OpenJDK8源码"><a href="#OpenJDK8源码" class="headerlink" title="OpenJDK8源码"></a>OpenJDK8源码</h2><p><a href="https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120">https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120</a></p><h2 id="基本依赖"><a href="#基本依赖" class="headerlink" title="基本依赖"></a>基本依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="由于在ubuntu22-04-3-中没有gcc-4-8-的源，-需要导入旧版的源"><a href="#由于在ubuntu22-04-3-中没有gcc-4-8-的源，-需要导入旧版的源" class="headerlink" title="由于在ubuntu22.04.3 中没有gcc 4.8 的源， 需要导入旧版的源"></a>由于在ubuntu22.04.3 中没有gcc 4.8 的源， 需要导入旧版的源</h2>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>   在最下方添加旧版源地址并保存</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://archive.ubuntu.com/ubuntu xenial main</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu xenial universe</span><br></pre></td></tr></table></figure><p>   更新apt源信息，并安装gcc和g++</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc-4.8 g++-4.8</span><br></pre></td></tr></table></figure><p>   在更新过程中 我遇到了</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Err:5 http://archive.ubuntu.com/ubuntu xenial InRelease</span><br><span class="line">The following signatures couldn<span class="string">&#x27;t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span></span><br><span class="line"><span class="string">Reading package lists... Done</span></span><br><span class="line"><span class="string">W: GPG error: http://archive.ubuntu.com/ubuntu xenial InRelease: The following signatures couldn&#x27;</span>t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span><br><span class="line">E: The repository <span class="string">&#x27;http://archive.ubuntu.com/ubuntu xenial InRelease&#x27;</span> is not signed.</span><br><span class="line">N: Updating from such a repository can<span class="string">&#x27;t be done securely, and is therefore disabled by default.</span></span><br><span class="line"><span class="string">N: See apt-secure(8) manpage for repository creation and user configuration details.</span></span><br></pre></td></tr></table></figure><p>   这是因为系统无法识别某些GPG公钥（PUBKEY）导致的。需要做的是在系统中获取这些缺失的公钥。可以使用以下命令来获取这些公钥：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>   设置安装的gcc g++4.8 为首选</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100</span><br></pre></td></tr></table></figure><p>   查看版本：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@aki:~<span class="comment"># g++ --version</span></span><br><span class="line">g++ (Ubuntu 4.8.5-4ubuntu2) 4.8.5</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">root@aki:~<span class="comment"># gcc --version</span></span><br><span class="line">gcc (Ubuntu 4.8.5-4ubuntu2) 4.8.5</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><h2 id="安装make-3-81版本"><a href="#安装make-3-81版本" class="headerlink" title="安装make 3.81版本"></a>安装make 3.81版本</h2><p>   从官方下载：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.gnu.org/gnu/make/make-3.81.tar.gz</span><br></pre></td></tr></table></figure><p>   下载完成之后：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf make-3.81.tar.gz </span><br><span class="line"><span class="built_in">cd</span> make-3.81/</span><br></pre></td></tr></table></figure><p>   接着修改代码，打开glob&#x2F;glob.c文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">#ifdef  HAVE_CONFIG_H</span></span><br><span class="line"><span class="comment"># include &lt;config.h&gt;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define __alloca alloca   &lt;- 添加这一句</span></span><br><span class="line"><span class="comment">#define __stat stat   &lt;- 添加这一句</span></span><br><span class="line">/* Enable GNU extensions </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>   防止之后出现报错：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: /root/make-3.81/glob/glob.c:955: undefined reference to `__stat<span class="string">&#x27;</span></span><br><span class="line"><span class="string">/usr/bin/ld: /root/make-3.81/glob/glob.c:809: undefined reference to `__stat&#x27;</span></span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">make[1]: *** [Makefile:411: make] Error 1</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/root/make-3.81&#x27;</span></span><br><span class="line">make: *** [Makefile:603: install-recursive] Error 1</span><br></pre></td></tr></table></figure><p>   然后进行安装 make-3.81</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash configure</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>   删除最新的make</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove make -y <span class="comment">#删除之前apt装的make，其位置在/usr/bin/make</span></span><br></pre></td></tr></table></figure><p>   删除链接</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /usr/bin/make</span><br></pre></td></tr></table></figure><p>   测试：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">make -version</span><br><span class="line">GNU Make 3.81</span><br><span class="line">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">This program built <span class="keyword">for</span> x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="安装bootstrap-JDK-OpenJDK8"><a href="#安装bootstrap-JDK-OpenJDK8" class="headerlink" title="安装bootstrap JDK: OpenJDK8"></a>安装bootstrap JDK: OpenJDK8</h2><p>   由于JDK中某些代码是Java编写的，所以我们还需要安装一个启动JDK，启动JDK可以是当前版本或低一版本，比如我们要编译JDK8的源码，那么就可以使用JDK7、JDK8作为启动JDK，对源码中的一些java文件进行编译。这里我们选择安装 openjdk8作为启动JDK：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h2 id="编译openjdk8"><a href="#编译openjdk8" class="headerlink" title="编译openjdk8"></a>编译openjdk8</h2><p>   解压</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip jdk8-b120</span><br></pre></td></tr></table></figure><p>   进入目录</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jdk-jdk8-b120/</span><br></pre></td></tr></table></figure><p>   修改文件以支持当前linux内核：<br>   首先是hotspot&#x2F;make&#x2F;linux&#x2F;Makefile文件</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原有的 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3%</span><br><span class="line">修改为 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3% 4% 5%</span><br></pre></td></tr></table></figure><p>   接着是hotspot&#x2F;make&#x2F;linux&#x2F;makefiles&#x2F;gcc.make文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原有的 WARNINGS_ARE_ERRORS = -Werror</span><br><span class="line">修改为 <span class="comment">#WARNINGS_ARE_ERRORS = -Werror</span></span><br></pre></td></tr></table></figure><p>   接着是nashorn&#x2F;make&#x2F;BuildNashorn.gmk文件：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(CP) -R -p $(NASHORN_OUTPUTDIR)/nashorn_classes/* $(@D)/</span><br><span class="line">$(FIXPATH) $(JAVA) \</span><br><span class="line">原有的 -<span class="built_in">cp</span> <span class="string">&quot;<span class="subst">$(NASHORN_OUTPUTDIR)</span>/nasgen_classes<span class="subst">$(PATH_SEP)</span><span class="subst">$(NASHORN_OUTPUTDIR)</span>/nashorn_classes&quot;</span> \</span><br><span class="line">修改为  -Xbootclasspath/p:<span class="string">&quot;<span class="subst">$(NASHORN_OUTPUTDIR)</span>/nasgen_classes<span class="subst">$(PATH_SEP)</span><span class="subst">$(NASHORN_OUTPUTDIR)</span>/nashorn_classes&quot;</span> \</span><br><span class="line"></span><br><span class="line">jdk.nashorn.internal.tools.nasgen.Main $(@D) jdk.nashorn.internal.objects $(@D)</span><br></pre></td></tr></table></figure><p>   执行编译前的configure</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash configure --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FIELS=0</span><br></pre></td></tr></table></figure><p>   含义解读：</p><ol><li>–with-debug-level&#x3D;slowdebug  生成一个带有调试信息的OpenJDK8版本，slowdebug表示调试级别是最低的，也就是说生成的二进制文件会比较小，但是调试信息会比较少</li><li>–enable-debug-symbols 在生成的二进制文件中包含调试符号，这样可以在使用调试工具时，看到源代码中的变量名和函数名等</li><li>ZIP_DEBUGINFO_FIELS&#x3D;0 不要将调试信息打包成zip文件，而是直接放在二进制文件中</li></ol><p>   编译</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>   遇到问题</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/home/jdk8/jdk/src/solaris/native/java/net/PlainDatagramSocketImpl.c:38:24: fatal error: sys/sysctl.h: 没有那个文件或目录</span><br><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br><span class="line">                        ^</span><br><span class="line">compilation terminated.</span><br><span class="line">/home/jdk8/jdk/src/solaris/native/java/net/PlainSocketImpl.c:46:24: fatal error: sys/sysctl.h: 没有那个文件或目录</span><br><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br><span class="line">                        ^</span><br><span class="line">compilation terminated.</span><br><span class="line">In file included from /home/jdk8/jdk/src/share/native/java/net/net_util.c:29:0:</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.c: In <span class="keyword">function</span> ‘NET_SockaddrToInetAddress’:</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.h:46:41: warning: comparison between pointer and <span class="built_in">integer</span> [enabled by default]</span><br><span class="line"><span class="comment">#define CHECK_NULL_RETURN(x, y) if ((x) == NULL) return y;</span></span><br><span class="line">                                        ^</span><br><span class="line">/home/jdk8/jdk/src/share/native/java/net/net_util.c:268:13: note: <span class="keyword">in</span> expansion of macro ‘CHECK_NULL_RETURN’</span><br><span class="line">            CHECK_NULL_RETURN(ret, NULL);</span><br><span class="line">            ^</span><br><span class="line">gmake[2]: *** [lib/NetworkingLibraries.gmk:57：/home/jdk8/build/linux-x86_64-normal-server-release/jdk/objs/libnet/PlainDatagramSocketImpl.o] 错误 1</span><br><span class="line">gmake[2]: *** 正在等待未完成的任务....</span><br><span class="line">gmake[2]: *** [lib/NetworkingLibraries.gmk:57：/home/jdk8/build/linux-x86_64-normal-server-release/jdk/objs/libnet/PlainSocketImpl.o] 错误 1</span><br><span class="line">gmake[1]: *** [BuildJdk.gmk:70：libs-only] 错误 2</span><br><span class="line">make: *** [/home/jdk8//make/Main.gmk:116：jdk-only] 错误 2</span><br></pre></td></tr></table></figure><p>   这个报错的主要原因是随着 glibc 2.32 的发布，Linux 系统删除了sys&#x2F;sysctl.h。</p><p>   因此解决方式只需要把openjdk8目录下的:</p><p>   jdk&#x2F;src&#x2F;solaris&#x2F;native&#x2F;java&#x2F;net&#x2F;PlainDatagramSocketImpl.c 中的38行<br>   jdk&#x2F;src&#x2F;solaris&#x2F;native&#x2F;java&#x2F;net&#x2F;PlainSocketImpl.c中的46行注释掉就行</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/sysctl.h&gt; 改成</span></span><br><span class="line">// <span class="comment">#include &lt;sys/sysctl.h&gt;</span></span><br></pre></td></tr></table></figure><p>   参考来自：<a href="https://blog.csdn.net/weixin_50955418/article/details/126716611">https://blog.csdn.net/weixin_50955418/article/details/126716611</a></p><p>   最后成功会显示</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">----- Build <span class="built_in">times</span> -------</span><br><span class="line">Start 2023-09-28 17:07:31</span><br><span class="line">End   2023-09-28 17:09:01</span><br><span class="line">00:00:00 corba</span><br><span class="line">00:00:06 demos</span><br><span class="line">00:00:56 docs</span><br><span class="line">00:00:00 hotspot</span><br><span class="line">00:00:08 images</span><br><span class="line">00:00:00 jaxp</span><br><span class="line">00:00:00 jaxws</span><br><span class="line">00:00:14 jdk</span><br><span class="line">00:00:00 langtools</span><br><span class="line">00:00:05 nashorn</span><br><span class="line">00:01:30 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK <span class="keyword">for</span> target <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>   在jdk-jdk8-b120&#x2F; 目录中输入：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/linux-x86_64-normal-server-slowdebug/jdk/bin/java -version</span><br></pre></td></tr></table></figure><p>   得到结果</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version <span class="string">&quot;1.8.0-internal-debug&quot;</span></span><br><span class="line"> OpenJDK Runtime Environment (build 1.8.0-internal-debug-root_2023_09_28_16_55-b00)</span><br><span class="line"> OpenJDK 64-Bit Server VM (build 25.0-b62-debug, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习JVM前的openjdk8编译</summary>
    
    
    
    <category term="学习" scheme="https://blog.akievergarden.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JVM" scheme="https://blog.akievergarden.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>b2云存储与cloudflareSaaS的ip精选</title>
    <link href="https://blog.akievergarden.top/2023/05/27/b2%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%8EcloudflareSaaS%E7%9A%84ip%E7%B2%BE%E9%80%89/"/>
    <id>https://blog.akievergarden.top/2023/05/27/b2%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%8EcloudflareSaaS%E7%9A%84ip%E7%B2%BE%E9%80%89/</id>
    <published>2023-05-27T19:42:59.000Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说实话：-不是很稳定，这就不推荐了"><a href="#说实话：-不是很稳定，这就不推荐了" class="headerlink" title="说实话： 不是很稳定，这就不推荐了"></a>说实话： 不是很稳定，这就不推荐了</h1><p>即使进行了ip精选，稳定性能也很低，时不时加载不出图，即使能加载图片，速率也很慢（，不建议费时间</p>]]></content>
    
    
    <summary type="html">说实话： 不是很稳定，这就不推荐了 即使进行了ip精选，稳定性能也很低，时不时加载不出图，即使能加载图片，速率也很慢（，不建议费时间 </summary>
    
    
    
    <category term="日常" scheme="https://blog.akievergarden.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="白嫖" scheme="https://blog.akievergarden.top/tags/%E7%99%BD%E5%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>javaweb实验</title>
    <link href="https://blog.akievergarden.top/2023/04/06/javaweb%E5%AE%9E%E9%AA%8C/"/>
    <id>https://blog.akievergarden.top/2023/04/06/javaweb%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-04-06T08:39:52.000Z</published>
    <updated>2024-03-20T12:59:53.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><p>使用相对路径进行图片展示<p><p><img src="/pic/illust_93484813_20220917_200428.jpg" alt="相对路径"></p><h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p>使用绝对路径进行图片展示<p><p><img src="https://img.mknacg.top:458/images/2020/04/01/BoxFront1.jpg" alt="绝对路径"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;相对路径&quot;&gt;&lt;a href=&quot;#相对路径&quot; class=&quot;headerlink&quot; title=&quot;相对路径&quot;&gt;&lt;/a&gt;相对路径&lt;/h1&gt;&lt;p&gt;使用相对路径进行图片展示&lt;p&gt;

&lt;p&gt;&lt;img src=&quot;/pic/illust_93484813_20220917_20</summary>
      
    
    
    
    
    <category term="实验" scheme="https://blog.akievergarden.top/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
</feed>
